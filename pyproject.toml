[build-system]
build-backend = "hatchling.build"

requires = [ "hatchling" ]

[project]
name = "proust-framework"
description = "AI Memory & Context Archivist - A framework for managing AI context and project memory"
readme = "README.md"
keywords = [ "ai", "context", "framework", "memory", "project-management" ]
license = "MIT"
authors = [
  { name = "Ren", email = "ren@example.com" },
]
requires-python = ">=3.8"
classifiers = [
  "Development Status :: 4 - Beta",
  "Environment :: Console",
  "Intended Audience :: Developers",
  "License :: OSI Approved :: MIT License",
  "Operating System :: OS Independent",
  "Programming Language :: Python :: 3 :: Only",
  "Programming Language :: Python :: 3.8",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: 3.13",
  "Topic :: Software Development :: Documentation",
  "Topic :: Software Development :: Libraries :: Python Modules",
  "Topic :: Software Development :: Quality Assurance",
]
dynamic = [ "version" ]
dependencies = [
  "click>=8",
  "pyyaml>=6",
  "requests>=2.28",
]

optional-dependencies.dev = [
  "black>=22",
  "coverage[toml]>=6",
  "flake8>=4",
  "mypy>=0.900",
  "pre-commit>=3",
  "pytest>=7",
  "pytest-cov>=4",
  "pytest-html>=3",
  "pytest-watch>=4",
]
urls.Documentation = "https://github.com/renkasiyas/proust"
urls.Issues = "https://github.com/renkasiyas/proust/issues"
urls.Source = "https://github.com/renkasiyas/proust"
scripts.proust = "proust.cli:main"

[tool.hatch.version]
path = "src/proust/__init__.py"

[tool.hatch.build.targets.sdist]
include = [
  "/src",
  "/README.md",
  "/LICENSE",
]

[tool.hatch.build.targets.wheel]
packages = [ "src/proust" ]

[tool.black]
line-length = 88
target-version = [ "py38" ]

[tool.pytest.ini_options]
testpaths = [ "tests" ]
python_files = "test_*.py"
python_classes = "Test*"
python_functions = "test_*"
addopts = [
  "--verbose",
  "--tb=short",
  "--strict-markers",
  "--cov=src",
  "--cov-report=term-missing",
  "--cov-report=html:htmlcov",
  "--cov-fail-under=80",
]
filterwarnings = [
  "ignore::DeprecationWarning",
  "ignore::PendingDeprecationWarning",
]
markers = [
  "slow: marks tests as slow (deselect with '-m \"not slow\"')",
  "integration: marks tests as integration tests",
  "symlink: marks tests that use symlink functionality",
  "cli: marks tests for CLI commands",
  "unit: marks tests as unit tests",
  "network: marks tests that require network access",
]

[tool.coverage.run]
source = [ "src" ]
omit = [
  "*/tests/*",
  "*/test_*",
  "*/__pycache__/*",
  "*/venv/*",
  "*/.venv/*",
]

[tool.coverage.report]
exclude_lines = [
  "pragma: no cover",
  "def __repr__",
  "if self.debug:",
  "if settings.DEBUG",
  "raise AssertionError",
  "raise NotImplementedError",
  "if 0:",
  "if __name__ == .__main__.:",
  "class .*\\bProtocol\\):",
  "@(abc\\.)?abstractmethod",
]

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
