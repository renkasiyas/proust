# =====================================================================
#  Project Manifest Template (manifesto.yml)
#  -------------------------------------------------------------------
#  ONE manifest per codebase.  Keep this file short, declarative,
#  and **sourceâ€‘ofâ€‘truth** for architecture rules and boundaries.
#  Copy or rename this file into your project (e.g. .context/manifesto.yml)
#  and then replace all **TODO** sections with projectâ€‘specific values.
# =====================================================================

# -------------------------------------------------
#  1 â–¸Â Project Identity
# -------------------------------------------------
project:
  # ðŸ‘‰ Humanâ€‘friendly name of the codebase / product.
  name: "TODO - e.g. Kasanova Backend API"
  # ðŸ‘‰ Short semantic version of the codebase (not the app version).
  version: "0.1.0"
  # ðŸ‘‰ Oneâ€‘sentence elevator pitch.
  description: "TODO - 140â€‘char description"
  # ðŸ‘‰ Primary runtime or platform (python, node, flutter, rust, etc.).
  runtime: "TODO"
  # ðŸ‘‰ Optional: highâ€‘level architecture paradigm.
  architecture: "TODO - e.g. clean architecture | hexagonal | MVC"

# -------------------------------------------------
# 2 â–¸ Core Principles
# -------------------------------------------------
# List 3â€‘7 nonâ€‘negotiable engineering/product principles.
principles:
  # key: "What that principle means in practice."
  example_principle: "Replace this and add more items as needed."
  # privacy_first: "Only store hashesâ€”never raw user data."
  # async_only: "All IO is async to maximise throughput."
  # performance_obsessed: "Aim for <200â€¯ms response on p95."

# -------------------------------------------------
# 3 â–¸ TechnologyÂ Stack
# -------------------------------------------------
technology_stack:
  language: "TODO - e.g. PythonÂ 3.13"
  framework: "TODO - e.g. FastAPI"
  dependency_management: "TODO - e.g. Poetry, pnpm"
  logging: "TODO - e.g. Rich + structlog"
  databases: [] # e.g. ["PostgreSQLÂ 15"]
  external_apis: [] # List significant 3rdâ€‘party APIs
  deployment: "TODO - e.g. Docker + Caddy"

# -------------------------------------------------
# 4 â–¸ Architecture Layers / Folders
# -------------------------------------------------
# Map highâ€‘level layers to folders or responsibilities.
architecture_layers:
  domain: "TODO - path or concept"
  use_cases: "TODO"
  adapters: "TODO"
  infra: "TODO"
  # Add/rename layers as required by your paradigm.

# -------------------------------------------------
# 5 â–¸ Guardrails  (coding commandments)
# -------------------------------------------------
# Bulletâ€‘proof rules that CI or reviewers MUST enforce.
guardrails:
  - "No business logic in controller / adapter layers."
  - "Pin all package versionsâ€”never caret (^)."
  - "Never commit secrets or .env files."
  # Add more guards that the team must never violate.

# -------------------------------------------------
# 6 â–¸ Testing Strategy
# -------------------------------------------------
testing:
  framework: "TODO - pytest | jest | etc."
  coverage_target: "80%" # Adjust as required
  mocking_library: "TODO"
  feature_toggles: "env + flagâ€‘based" # Or remove if N/A

# -------------------------------------------------
# 7 â–¸ Deployment Targets
# -------------------------------------------------
deployment:
  local:
    port: 8000
    env: development
    notes: "Docker Compose override for dev."
  staging:
    port: 443
    env: staging
    reverse_proxy: "TODO - e.g. Caddy"
  production:
    port: 443
    env: production
    reverse_proxy: "TODO"
  # Add/remove environments as necessary.

# -------------------------------------------------
# 8 â–¸ Hostname Map (optional)
# -------------------------------------------------
hostnames:
  # logical_name: actual_dns_name
  api_local: localhost
  api_staging: "stagingâ€‘api.example.com"
  api_production: "api.example.com"

# -------------------------------------------------
# 9 â–¸ Folder Shortcuts (if relevant)
# -------------------------------------------------
folders:
  src: "TODO - main source root"
  tests: "TODO - test root"
  # Add any important folder aliases the team relies on.

# -------------------------------------------------
# 10 â–¸ Custom Sections
# -------------------------------------------------
# Feel free to add any other domains (feature flags, CI, i18n, etc.).
custom:
  notes: "Delete this section or repurpose for domainâ€‘specific data."
